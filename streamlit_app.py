import streamlit as st
import pandas as pd
import joblib
import random
import plotly.graph_objects as go
import plotly.express as px

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.set_page_config(page_title="–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", layout="wide")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ ===
model = joblib.load('model.pkl')
scaler = joblib.load('scaler.pkl')
numeric_features = joblib.load('numeric_features.pkl')   # ['x1', ‚Ä¶, 'x8']

# === –ß–∏—Ç–∞–µ–º—ã–µ –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
feature_names = {
    'x1': '–ö–æ–ª-–≤–æ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
    'x2': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏',
    'x3': '% –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å—Ä–æ–∫',
    'x4': '–ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    'x5': '% –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫',
    'x6': '–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤',
    'x7': '–†–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—Ç–∑—ã–≤–∞–º',
    'x8': '–û—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
}

# === –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ===
@st.cache_data
def load_data():
    df = pd.read_csv("tochkabalanced_risk_dataset_60_61_59.csv", sep=";")
    df = df.rename(columns={'y': 'Y'})
    df.columns = list(numeric_features) + ['Y']
    return df

df = load_data()

@st.cache_data
def fake_names(n:int):
    prefixes = ['–û–û–û', '–ó–ê–û', '–ò–ü', '–ü–ê–û']
    roots    = ['–ì—Ä–∞–Ω–∏—Ç', '–¢–µ—Ö–ü–æ—Å—Ç–∞–≤–∫–∞', '–°–æ—é–∑', '–ë–µ—Ç–æ–Ω–¢—Ä–∞—Å—Ç', '–†–µ—Å—É—Ä—Å', '–ò–Ω–¥—É—Å—Ç—Ä–∏—è']
    suf      = ['–°—Ç—Ä–æ–π', '–ú–µ—Ç–∞–ª–ª', '–°–Ω–∞–±', '–¢—Ä–µ–π–¥']
    return [f"{random.choice(prefixes)} \"{random.choice(roots)}{random.choice(suf)}\"" for _ in range(n)]

df['supplier_name'] = fake_names(len(df))

# =====================================================================================
# SIDEBAR ‚Äì AI-–ø–æ–∏—Å–∫ + –º–æ–¥–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–∞ + –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
# =====================================================================================

st.sidebar.subheader("ü§ñ AI-–ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
query = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
if st.sidebar.button("–ü–æ–∏—Å–∫", key="ai_search_btn") and query:
    st.sidebar.info("–ü–æ—Å—Ç–∞–≤—â–∏–∫ –Ω–∞–π–¥–µ–Ω: —Ä–µ–π—Ç–∏–Ω–≥ 4.6/5, —Ä–∏—Å–∫ ‚Äî –ù–∏–∑–∫–∏–π (A)")

# –ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.sidebar.markdown("**üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏**")
for k, v in feature_names.items():
    st.sidebar.markdown(f"`{k}` ‚Äî {v}")

st.sidebar.markdown("---")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
st.sidebar.markdown("### ‚ÑπÔ∏è –ú–æ–¥–µ–ª—å")
acc = (model.predict(scaler.transform(df[numeric_features])) == df['Y']).mean()*100
st.sidebar.markdown(f"**–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å**\n\n–¢–æ—á–Ω–æ—Å—Ç—å: **{acc:.2f}%**")

# Donut ‚Äì –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
st.sidebar.markdown("### üìà –í–∞–∂–Ω–æ—Å—Ç—å")
fig_imp = go.Figure(go.Pie(labels=[feature_names[f] for f in numeric_features],
                           values=model.feature_importances_,
                           hole=.45,
                           textinfo='percent',
                           textfont_size=10))
fig_imp.update_layout(width=320, height=320, margin=dict(l=0, r=0, t=20, b=0))
st.sidebar.plotly_chart(fig_imp, use_container_width=False)

# –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤
st.sidebar.markdown("### üìä –ö–ª–∞—Å—Å—ã —Ä–∏—Å–∫–∞")
rc = df['Y'].value_counts().sort_index()
fig_risk = px.bar(x=rc.values, y=['A','B','C'], orientation='h',
                 height=180, labels={'x':'–ö–æ–ª-–≤–æ','y':'–ö–ª–∞—Å—Å'})
fig_risk.update_yaxes(categoryorder='array', categoryarray=['C','B','A'])
fig_risk.update_layout(showlegend=False, margin=dict(l=0,r=0,t=10,b=0))
st.sidebar.plotly_chart(fig_risk, use_container_width=True)

# =====================================================================================
# MAIN LAYOUT  ‚Äì –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –∫–æ–Ω—Ç–µ–Ω—Ç + –ø—Ä–∞–≤–∞—è ¬´–ø–∞–Ω–µ–ª—å¬ª TOP-5
# =====================================================================================

st.markdown("<h1 style='text-align:center'>üì¶ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</h1>", unsafe_allow_html=True)

main, right = st.columns([3,1], gap="large")

# -------------------------- MAIN : –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ü–µ–Ω–∫–∏ -------------------------------
with main:
    with st.container():
        st.markdown("""
        <div>
        """, unsafe_allow_html=True)
        st.markdown("#### üîç –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")

        example = {k:v for k,v in zip(numeric_features,[45,7,92,4.3,5,300000,4.6,4])}
        use_ex = st.checkbox("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä–æ–º", key="ex")
        c1,c2 = st.columns(2)
        inp = {}
        for idx,f in enumerate(numeric_features):
            lbl = feature_names[f]
            with (c1 if idx%2==0 else c2):
                inp[f] = st.number_input(lbl, value=example[f] if use_ex else 0.0, key=f)

        if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∏—Å–∫", key="predict"):
            X_new = pd.DataFrame([inp])
            pred = model.predict(scaler.transform(X_new))[0]
            st.success({'A':'üü¢ –ù–∏–∑–∫–∏–π','B':'üü° –°—Ä–µ–¥–Ω–∏–π','C':'üî¥ –í—ã—Å–æ–∫–∏–π'}[pred])

        st.markdown("</div>", unsafe_allow_html=True)

    # --- –ë–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
    st.markdown("---")
    st.markdown("### üìò –ë–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
    fil = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ", key="filter")
    st.dataframe(df[df['supplier_name'].str.contains(fil, case=False)][['supplier_name']+numeric_features+['Y']])

# -------------------------- RIGHT : –¢–û–ü-5 ---------------------------------------
with right:
    st.markdown("""
    <div>
    <h4 style='text-align:center'>üèÜ –¢–û–ü-5 A-–∫–ª–∞—Å—Å–∞</h4>
    """, unsafe_allow_html=True)
    for n in df[df['Y']=='A']['supplier_name'].head(5):
        st.markdown(f"<div style='background:#f1f1f1;border-radius:10px;padding:8px;text-align:center;margin-bottom:8px;'> {n} </div>", unsafe_allow_html=True)
    st.markdown("</div>", unsafe_allow_html=True)

# =====================================================================================
# FOOTER
# =====================================================================================

st.markdown("---")
st.markdown("<div style='text-align:center;color:gray;'>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ ¬© 2025</div>", unsafe_allow_html=True)