import streamlit as st
import pandas as pd
import joblib
import random
import plotly.express as px
from sklearn.decomposition import PCA
from sklearn.neighbors import NearestNeighbors

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", layout="wide")

# === Responsive CSS hack ===
st.markdown(
    """
    <style>
    @media (max-width: 768px) {
      section[data-testid=\"stColumns\"] > div {
        width: 100% !important;
        flex: 1 1 100% !important;
      }
    }
    @media (max-width: 600px) {
      .top5-card {
        min-width: 100% !important;
      }
    }
    </style>
    """,
    unsafe_allow_html=True
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã—Ö
model = joblib.load('model.pkl')
scaler = joblib.load('scaler.pkl')
numeric_features = joblib.load('numeric_features.pkl')

@st.cache_data
def load_data():
    df = pd.read_csv("tochkabalanced_risk_dataset_60_61_59.csv", sep=";")
    df = df.rename(columns={'y': 'Y'})
    df.columns = list(numeric_features) + ['Y']
    return df

@st.cache_data
def fake_suppliers(n: int):
    prefixes = ['–û–û–û', '–ó–ê–û', '–ò–ü', '–ü–ê–û']
    roots = ['–ì—Ä–∞–Ω–∏—Ç', '–¢–µ—Ö–ü–æ—Å—Ç–∞–≤–∫–∞', '–°–æ—é–∑', '–ë–µ—Ç–æ–Ω–¢—Ä–∞—Å—Ç', '–†–µ—Å—É—Ä—Å', '–ò–Ω–¥—É—Å—Ç—Ä–∏—è']
    suf = ['–°—Ç—Ä–æ–π', '–ú–µ—Ç–∞–ª–ª', '–°–Ω–∞–±', '–¢—Ä–µ–π–¥']
    return [f"{random.choice(prefixes)} \"{random.choice(roots)}{random.choice(suf)}\"" for _ in range(n)]

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()
df['supplier_name'] = fake_suppliers(len(df))

labels = {
    'x1': '–ö–æ–ª-–≤–æ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
    'x2': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏',
    'x3': '% –¥–æ—Å—Ç–∞–≤–æ–∫ –≤ —Å—Ä–æ–∫',
    'x4': '–ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
    'x5': '% –¥–µ—Ñ–µ–∫—Ç–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫',
    'x6': '–°—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤',
    'x7': '–†–µ–π—Ç–∏–Ω–≥ –ø–æ –æ—Ç–∑—ã–≤–∞–º',
    'x8': '–û—Ü–µ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤'
}

# Sidebar
st.sidebar.subheader("ü§ñ AI-–ø–æ–∏—Å–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
q = st.sidebar.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
if st.sidebar.button("–ü–æ–∏—Å–∫") and q:
    st.sidebar.info("–ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç–∞–≤—â–∏–∫: —Ä–µ–π—Ç–∏–Ω–≥ 4.6/5, —Ä–∏—Å–∫ A")

st.sidebar.markdown("---")
st.sidebar.markdown("### üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
for k, v in labels.items():
    st.sidebar.markdown(f"`{k}` ‚Äî {v}")

st.sidebar.markdown("---")
st.sidebar.markdown("### üìà –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
fi_values = model.feature_importances_
feature_names = [labels[k] for k in numeric_features]
fig_imp = px.bar(
    x=fi_values,
    y=feature_names,
    orientation='h',
    labels={'x': '–í–∞–∂–Ω–æ—Å—Ç—å', 'y': '–ü—Ä–∏–∑–Ω–∞–∫'},
    title='–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤'
)
fig_imp.update_layout(height=400, margin=dict(l=0, r=0, t=30, b=0))
st.sidebar.plotly_chart(fig_imp, use_container_width=True)

st.sidebar.markdown("### üìä –ö–ª–∞—Å—Å—ã —Ä–∏—Å–∫–∞")
rc = df['Y'].value_counts().sort_index()
fig_risk = px.bar(
    x=rc.values,
    y=['A', 'B', 'C'],
    orientation='h',
    height=180,
    labels={'x': '–ö–æ–ª-–≤–æ', 'y': '–ö–ª–∞—Å—Å'},
    text_auto=True
)
fig_risk.update_layout(showlegend=False, margin=dict(l=0, r=0, t=10, b=0))
st.sidebar.plotly_chart(fig_risk, use_container_width=True)

# Main Title
st.markdown("<h1 style='text-align:center'>üì¶ –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤</h1>", unsafe_allow_html=True)

# Risk Card
with st.container():
    st.markdown("<div><h3>üîç –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</h3>", unsafe_allow_html=True)

    ex = {f: v for f, v in zip(numeric_features, [615, 10, 98, 4.7, 2, 280000, 4.4, 4])}
    use_ex = st.checkbox("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä–æ–º", key="ex")
    c1, c2 = st.columns(2)
    user = {}
    for idx, f in enumerate(numeric_features):
        with (c1 if idx % 2 == 0 else c2):
            user[f] = st.number_input(labels[f], value=ex[f] if use_ex else 0.0, key=f)

    if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ä–∏—Å–∫"):
        X_new = pd.DataFrame([user])
        scaled_new = scaler.transform(X_new)
        pred = model.predict(scaled_new)[0]
        risk_map = {'A': 'üü¢ –ù–∏–∑–∫–∏–π', 'B': 'üü° –°—Ä–µ–¥–Ω–∏–π', 'C': 'üî¥ –í—ã—Å–æ–∫–∏–π'}
        st.markdown(f"## –†–µ–∑—É–ª—å—Ç–∞—Ç: {risk_map[pred]}")

        # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤
        if hasattr(model, 'predict_proba'):
            probs = model.predict_proba(scaled_new)[0]
            prob_text = " | ".join([f"{cls}: {p:.1%}" for cls, p in zip(model.classes_, probs)])
            st.markdown(f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º:** {prob_text}")

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è scatter-–ø–ª–æ—Ç–∞
        X_scaled = scaler.transform(df[numeric_features])
        pca = PCA(n_components=2)
        pcs = pca.fit_transform(X_scaled)
        df['pc1'], df['pc2'] = pcs[:, 0], pcs[:, 1]
        new_pc = pca.transform(scaled_new)[0]

        # –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Å–µ–¥–∏
        nbrs = NearestNeighbors(n_neighbors=6).fit(X_scaled)
        distances, indices = nbrs.kneighbors(scaled_new)
        neigh = df.iloc[indices[0][1:]]  # –∏—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤–æ–π (–Ω–æ–≤—ã–π —Å–∞–º)

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        fig = px.scatter(
            df, x='pc1', y='pc2', color='Y',
            labels={'pc1': 'PC1', 'pc2': 'PC2'},
            title='–†–∞–∑–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ'
        )
        # –ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫
        fig.add_scatter(x=[new_pc[0]], y=[new_pc[1]], mode='markers',
                        marker={'size':14, 'symbol':'x', 'color':'black'},
                        name='–ù–æ–≤—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫')
        # –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Å–µ–¥–∏
        fig.add_scatter(x=neigh['pc1'], y=neigh['pc2'], mode='markers',
                        marker={'size':12, 'color':'red'}, name='–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ—Å–µ–¥–∏')
        fig.update_layout(height=500, margin=dict(l=0, r=0, t=30, b=0))
        st.plotly_chart(fig, use_container_width=True)

    st.markdown("</div>", unsafe_allow_html=True)

# –ë–∞–∑–∞ + TOP-5
st.markdown("---")
left, right = st.columns([4, 1], gap="large")
with left:
    st.markdown("### üìò –ë–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤")
    flt = st.text_input("–ü–æ–∏—Å–∫", key="flt")
    st.dataframe(
        df[df['supplier_name'].str.contains(flt, case=False)][['supplier_name'] + list(numeric_features) + ['Y']],
        use_container_width=True
    )
with right:
    st.markdown("### üèÜ –¢–û–ü-5 A-–∫–ª–∞—Å—Å–∞")
    for n in df[df['Y'] == 'A']['supplier_name'].head(5):
        st.markdown(
            f"<div class='top5-card' style='background:#f3f3f3;border-radius:10px;padding:8px;text-align:center;margin-bottom:8px;min-width:100px;'>{n}</div>",
            unsafe_allow_html=True
        )

# Footer
st.markdown("---")
st.markdown("<div style='text-align:center;color:gray'>–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ ¬© 2025</div>", unsafe_allow_html=True)
